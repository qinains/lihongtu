//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3615
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.42。
// 

namespace Linkage.BestTone.Interface.Utility
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "EncryptSoapBinding", Namespace = "urn:Encrypt")]
    public partial class BestPayEncryptService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback encryptWithKeyOperationCompleted;

        private System.Threading.SendOrPostCallback encryptNoKeyOperationCompleted;

        /// <remarks/>
        public BestPayEncryptService()
        {
            this.Url = System.Configuration.ConfigurationManager.AppSettings["bestpay_encrypt_webservice_uri"]; // "http://bksvc.besttone.com.cn/Encrypt/services/Encrypt"; // "http://bksvc.besttone.com.cn:8080/Encrypt/services/Encrypt";
        }

        /// <remarks/>
        public event encryptWithKeyCompletedEventHandler encryptWithKeyCompleted;

        /// <remarks/>
        public event encryptNoKeyCompletedEventHandler encryptNoKeyCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://encrypt.besttone.com", ResponseNamespace = "urn:Encrypt")]
        [return: System.Xml.Serialization.SoapElementAttribute("encryptWithKeyReturn")]
        public string encryptWithKey(string key, string pinkey, string cardOrAccountNo)
        {
            object[] results = this.Invoke("encryptWithKey", new object[] {
                    key,
                    pinkey,
                    cardOrAccountNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginencryptWithKey(string key, string pinkey, string cardOrAccountNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("encryptWithKey", new object[] {
                    key,
                    pinkey,
                    cardOrAccountNo}, callback, asyncState);
        }

        /// <remarks/>
        public string EndencryptWithKey(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void encryptWithKeyAsync(string key, string pinkey, string cardOrAccountNo)
        {
            this.encryptWithKeyAsync(key, pinkey, cardOrAccountNo, null);
        }

        /// <remarks/>
        public void encryptWithKeyAsync(string key, string pinkey, string cardOrAccountNo, object userState)
        {
            if ((this.encryptWithKeyOperationCompleted == null))
            {
                this.encryptWithKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnencryptWithKeyOperationCompleted);
            }
            this.InvokeAsync("encryptWithKey", new object[] {
                    key,
                    pinkey,
                    cardOrAccountNo}, this.encryptWithKeyOperationCompleted, userState);
        }

        private void OnencryptWithKeyOperationCompleted(object arg)
        {
            if ((this.encryptWithKeyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.encryptWithKeyCompleted(this, new encryptWithKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://encrypt.besttone.com", ResponseNamespace = "urn:Encrypt")]
        [return: System.Xml.Serialization.SoapElementAttribute("encryptNoKeyReturn")]
        public string encryptNoKey(string pinkey, string cardOrAccountNo)
        {
            object[] results = this.Invoke("encryptNoKey", new object[] {
                    pinkey,
                    cardOrAccountNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginencryptNoKey(string pinkey, string cardOrAccountNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("encryptNoKey", new object[] {
                    pinkey,
                    cardOrAccountNo}, callback, asyncState);
        }

        /// <remarks/>
        public string EndencryptNoKey(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void encryptNoKeyAsync(string pinkey, string cardOrAccountNo)
        {
            this.encryptNoKeyAsync(pinkey, cardOrAccountNo, null);
        }

        /// <remarks/>
        public void encryptNoKeyAsync(string pinkey, string cardOrAccountNo, object userState)
        {
            if ((this.encryptNoKeyOperationCompleted == null))
            {
                this.encryptNoKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnencryptNoKeyOperationCompleted);
            }
            this.InvokeAsync("encryptNoKey", new object[] {
                    pinkey,
                    cardOrAccountNo}, this.encryptNoKeyOperationCompleted, userState);
        }

        private void OnencryptNoKeyOperationCompleted(object arg)
        {
            if ((this.encryptNoKeyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.encryptNoKeyCompleted(this, new encryptNoKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void encryptWithKeyCompletedEventHandler(object sender, encryptWithKeyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class encryptWithKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal encryptWithKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void encryptNoKeyCompletedEventHandler(object sender, encryptNoKeyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class encryptNoKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal encryptNoKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}