//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3615
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.42。
// 

namespace Linkage.BestTone.Interface.Utility
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BestPayEncryptSoapBinding", Namespace = "urn:BestPayEncrypt")]
    public partial class PinkeyEncryptService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback encryptOperationCompleted;

        private System.Threading.SendOrPostCallback encrypt1OperationCompleted;

        private System.Threading.SendOrPostCallback mainOperationCompleted;

        /// <remarks/>
        public PinkeyEncryptService()
        {
            this.Url = "http://bksvc.besttone.com.cn/BestPayEncrypt/services/BestPayEncrypt";
        }

        /// <remarks/>
        public event encryptCompletedEventHandler encryptCompleted;

        /// <remarks/>
        public event encrypt1CompletedEventHandler encrypt1Completed;

        /// <remarks/>
        public event mainCompletedEventHandler mainCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://encrypt.bestpay.besttone.com", ResponseNamespace = "urn:BestPayEncrypt")]
        [return: System.Xml.Serialization.SoapElementAttribute("encryptReturn")]
        public string encrypt(string pinkey, string cardOrAccountNo)
        {
            object[] results = this.Invoke("encrypt", new object[] {
                    pinkey,
                    cardOrAccountNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginencrypt(string pinkey, string cardOrAccountNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("encrypt", new object[] {
                    pinkey,
                    cardOrAccountNo}, callback, asyncState);
        }

        /// <remarks/>
        public string Endencrypt(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void encryptAsync(string pinkey, string cardOrAccountNo)
        {
            this.encryptAsync(pinkey, cardOrAccountNo, null);
        }

        /// <remarks/>
        public void encryptAsync(string pinkey, string cardOrAccountNo, object userState)
        {
            if ((this.encryptOperationCompleted == null))
            {
                this.encryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnencryptOperationCompleted);
            }
            this.InvokeAsync("encrypt", new object[] {
                    pinkey,
                    cardOrAccountNo}, this.encryptOperationCompleted, userState);
        }

        private void OnencryptOperationCompleted(object arg)
        {
            if ((this.encryptCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.encryptCompleted(this, new encryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName = "encrypt1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://encrypt.bestpay.besttone.com", ResponseNamespace = "urn:BestPayEncrypt")]
        [return: System.Xml.Serialization.SoapElementAttribute("encryptReturn")]
        public string encrypt(string pinkey, string cardOrAccountNo, string orderNo, string pubKey, string keyMod)
        {
            object[] results = this.Invoke("encrypt1", new object[] {
                    pinkey,
                    cardOrAccountNo,
                    orderNo,
                    pubKey,
                    keyMod});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginencrypt1(string pinkey, string cardOrAccountNo, string orderNo, string pubKey, string keyMod, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("encrypt1", new object[] {
                    pinkey,
                    cardOrAccountNo,
                    orderNo,
                    pubKey,
                    keyMod}, callback, asyncState);
        }

        /// <remarks/>
        public string Endencrypt1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void encrypt1Async(string pinkey, string cardOrAccountNo, string orderNo, string pubKey, string keyMod)
        {
            this.encrypt1Async(pinkey, cardOrAccountNo, orderNo, pubKey, keyMod, null);
        }

        /// <remarks/>
        public void encrypt1Async(string pinkey, string cardOrAccountNo, string orderNo, string pubKey, string keyMod, object userState)
        {
            if ((this.encrypt1OperationCompleted == null))
            {
                this.encrypt1OperationCompleted = new System.Threading.SendOrPostCallback(this.Onencrypt1OperationCompleted);
            }
            this.InvokeAsync("encrypt1", new object[] {
                    pinkey,
                    cardOrAccountNo,
                    orderNo,
                    pubKey,
                    keyMod}, this.encrypt1OperationCompleted, userState);
        }

        private void Onencrypt1OperationCompleted(object arg)
        {
            if ((this.encrypt1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.encrypt1Completed(this, new encrypt1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://encrypt.bestpay.besttone.com", ResponseNamespace = "urn:BestPayEncrypt")]
        public void main(string[] args)
        {
            this.Invoke("main", new object[] {
                    args});
        }

        /// <remarks/>
        public System.IAsyncResult Beginmain(string[] args, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("main", new object[] {
                    args}, callback, asyncState);
        }

        /// <remarks/>
        public void Endmain(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void mainAsync(string[] args)
        {
            this.mainAsync(args, null);
        }

        /// <remarks/>
        public void mainAsync(string[] args, object userState)
        {
            if ((this.mainOperationCompleted == null))
            {
                this.mainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmainOperationCompleted);
            }
            this.InvokeAsync("main", new object[] {
                    args}, this.mainOperationCompleted, userState);
        }

        private void OnmainOperationCompleted(object arg)
        {
            if ((this.mainCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.mainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void encryptCompletedEventHandler(object sender, encryptCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class encryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal encryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void encrypt1CompletedEventHandler(object sender, encrypt1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class encrypt1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal encrypt1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void mainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}